{"version":3,"sources":["config/firebaseConfig.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Button","setTimes","times","triggerTurtleSound","a","disabled","audio","play","setDisabled","setTimeout","prev","increaseValueToButton","databaseRef","database","ref","set","useEffect","sound","Audio","setAudio","useState","ButtonBackground","styled","button","onClick","ButtonText","style","borderRadius","width","height","src","h2","App","animTitle","useSpring","from","opacity","fontSize","to","color","fontFamily","config","gentle","on","snap","updateButtonValue","val","off","value","className","h1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAYe,EAACA,IAASC,KAAKC,OAE1BF,IAASG,MADTH,IAASI,cAZS,CACpBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,iTC4CFC,MAhDf,YAAsC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAEpBC,EAAkB,uCAAG,sBAAAC,EAAA,0DACrBC,EADqB,wDAEzBC,EAAMC,OACNC,GAAY,GAHa,SAInBC,YAAW,kBAAMD,GAAY,KAAQ,MAJlB,OAKzBP,GAAS,SAACS,GAAD,OAAUA,EAAO,KAC1BC,IANyB,2CAAH,qDAQlBA,EAAqB,uCAAG,4BAAAP,EAAA,6DACxBQ,EAAczB,EAAS0B,WAAWC,IAAI,gBADd,SAEtBF,EAAYG,IAAIb,EAAQ,GAFF,2CAAH,qDAM3Bc,qBAAU,WACR,IAAIC,EAAQ,IAAIC,MAAM,iCAEtB,OADAC,EAASF,GACF,eACN,IApBgC,MAuBTG,mBAAS,MAvBA,mBAuB5Bd,EAvB4B,KAuBrBa,EAvBqB,OAwBHC,oBAAS,GAxBN,mBAwB5Bf,EAxB4B,KAwBlBG,EAxBkB,KA0B7Ba,EAAmBC,IAAOC,OAAV,IACLlB,EAAuB,UAAZ,WAO5B,OACE,6BACE,kBAACgB,EAAD,CAAkBG,QAAS,kBAAMrB,MAC/B,kBAACsB,EAAD,2DACCpB,EACC,yBACEqB,MAAO,CAAEC,aAAc,GAAIC,MAAO,IAAKC,OAAQ,KAC/CC,IAAI,sDAEJ,QAMNL,EAAaH,IAAOS,GAAV,KCVDC,MAtCf,WAEE,IAAIpB,EAAczB,EAAS0B,WAAWC,IAAI,gBACpCmB,EAAYC,YAAU,CAC1BC,KAAM,CACJC,QAAS,EACTC,SAAU,GAEZC,GAAI,CACFF,QAAS,EACTC,SAAU,IACVE,MAAO,UACPC,WAAY,kBAEdC,OAAQA,IAAOC,SAdJ,EAgBatB,mBAAS,MAhBtB,mBAgBNlB,EAhBM,KAgBCD,EAhBD,KAiBbe,qBAAU,WAER,OADAJ,EAAY+B,GAAG,SAAS,SAACC,GAAD,OAAUC,EAAkBD,EAAKE,UAClD,WACLlC,EAAYmC,SAEb,IAGH,IAAMF,EAAiB,uCAAG,WAAOG,GAAP,SAAA5C,EAAA,sDACxBH,EAAS+C,GADe,2CAAH,sDAGvB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAASC,GAAV,CAAaxB,MAAOO,GAApB,8BACoB/B,GAAgB,SADpC,UAGA,kBAAC,EAAD,CAAQD,SAAUA,EAAUC,MAAOA,MC3BrBiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe399926.chunk.js","sourcesContent":["import firebase from \"firebase\";\nexport const config = {\n  apiKey: \"AIzaSyAbLzjyzLqol3ZmoFqIMTOTs0AiJ4Cuy1U\",\n  authDomain: \"theturtlewhofucks.firebaseapp.com\",\n  databaseURL: \"https://theturtlewhofucks.firebaseio.com\",\n  projectId: \"theturtlewhofucks\",\n  storageBucket: \"theturtlewhofucks.appspot.com\",\n  messagingSenderId: \"946216130059\",\n  appId: \"1:946216130059:web:b2d07bb5591f6c7de1990e\",\n  measurementId: \"G-2GE1T98T6D\",\n};\n\nexport default !firebase.apps.length\n  ? firebase.initializeApp(config)\n  : firebase.app();\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring } from \"react-spring\";\nimport firebase from \"../config/firebaseConfig\";\n\nfunction Button({ setTimes, times }) {\n  // FUNCTIONS\n  const triggerTurtleSound = async () => {\n    if (disabled) return;\n    audio.play();\n    setDisabled(true);\n    await setTimeout(() => setDisabled(false), 1400);\n    setTimes((prev) => prev + 1);\n    increaseValueToButton();\n  };\n  const increaseValueToButton = async () => {\n    let databaseRef = firebase.database().ref(\"/buttonValue\");\n    await databaseRef.set(times + 1);\n  };\n\n  // USE EFFECT\n  useEffect(() => {\n    let sound = new Audio(\"http://peal.io/download/0kh9r\");\n    setAudio(sound);\n    return () => {};\n  }, []);\n\n  // STATE\n  const [audio, setAudio] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  const ButtonBackground = styled.button`\n    background: ${!disabled ? \"#e07a5f\" : \"#C2BFB0\"};\n    height: 10%;\n    width: 20%;\n    border-radius: 20px;\n    outline: none;\n    border: none;\n  `;\n  return (\n    <div>\n      <ButtonBackground onClick={() => triggerTurtleSound()}>\n        <ButtonText>🐢 👉👌 🐢</ButtonText>\n        {disabled ? (\n          <img\n            style={{ borderRadius: 10, width: 150, height: 150 }}\n            src=\"https://i.makeagif.com/media/2-15-2017/4CwzYn.gif\"\n          />\n        ) : null}\n      </ButtonBackground>\n    </div>\n  );\n}\nexport default Button;\nconst ButtonText = styled.h2`\n  font-size: 40px;\n  color: #3d410z;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { animated, useSpring, config } from \"react-spring\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport firebase from \"./config/firebaseConfig\";\n\nfunction App() {\n  // database\n  let databaseRef = firebase.database().ref(\"/buttonValue\");\n  const animTitle = useSpring({\n    from: {\n      opacity: 0,\n      fontSize: 0,\n    },\n    to: {\n      opacity: 1,\n      fontSize: 100,\n      color: \"#3d405b\",\n      fontFamily: \"Press Start 2P\",\n    },\n    config: config.gentle,\n  });\n  const [times, setTimes] = useState(null);\n  useEffect(() => {\n    databaseRef.on(\"value\", (snap) => updateButtonValue(snap.val()));\n    return () => {\n      databaseRef.off();\n    };\n  }, []);\n\n  // FUNCTIONS\n  const updateButtonValue = async (value) => {\n    setTimes(value);\n  };\n  return (\n    <div className=\"App\">\n      <animated.h1 style={animTitle}>\n        Make the 🐢 fuck {times ? times : \"⏳\"} times\n      </animated.h1>\n      <Button setTimes={setTimes} times={times} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}